services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    ports:
      - "${SERVER_PORT:-8080}:8080"
    volumes:
      - h2-data:/app/data
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      # JAVA_OPTS otimizado para resolver OutOfMemoryError: Metaspace
      - JAVA_OPTS=-server -Xmx512m -Xms256m -Xss512k -XX:+UseG1GC -XX:CompressedClassSpaceSize=64m -XX:ReservedCodeCacheSize=64m -Djava.awt.headless=true -XX:+OptimizeStringConcat -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UseStringDeduplication -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/ -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:/tmp/gc.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=3 -XX:GCLogFileSize=10M -XX:G1HeapRegionSize=8m -XX:MaxGCPauseMillis=200 
    deploy:
      resources:
        limits:
          memory: 1g          # Aumentado para acomodar Metaspace maior
        reservations:
          memory: 512m          # Aumentado para acomodar Metaspace maior
    healthcheck:
      # ‚úÖ Usando wget (geralmente dispon√≠vel) ou Java direto
      #test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ssl-certs:/etc/letsencrypt:ro
      - certbot-web:/var/www/certbot
      - nginx-logs:/var/log/nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NGINX_HOST=${NGINX_HOST:-bina.fernandojunior.com.br}
      - ENVIRONMENT=${ENVIRONMENT:-prod}
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-fernando.medeiros@gmail.com}
    deploy:
      resources:
        limits:
          memory: 64m           # ‚úÖ OK para Nginx
        reservations:
          memory: 32m           # ‚úÖ OK para Nginx
    depends_on:
      app:
        condition: service_healthy  # ‚úÖ Aguarda app estar saud√°vel
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ssl-certs:/etc/letsencrypt
      - certbot-web:/var/www/certbot
      - certbot-logs:/var/log/letsencrypt
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-fernando.medeiros@gmail.com}
      - DOMAIN=${NGINX_HOST:-bina.fernandojunior.com.br}
    deploy:
      resources:
        limits:
          memory: 32m           # ‚úÖ Certbot √© leve
        reservations:
          memory: 16m
    command: >
      sh -c '
        echo "üîê Iniciando renova√ß√£o autom√°tica de certificados..." &&
        while true; do
          sleep 12h &&
          echo "üîÑ Verificando renova√ß√£o..." &&
          certbot renew --webroot -w /var/www/certbot --quiet --non-interactive --agree-tos --email $${CERTBOT_EMAIL} &&
          echo "‚úÖ Certificados renovados!" &&
          docker exec nginx nginx -s reload 2>/dev/null || echo "‚ö†Ô∏è Nginx reload falhou"
        done
      '
    depends_on:
      - nginx
    networks:
      - app-network
    restart: unless-stopped

volumes:
  h2-data:
    driver: local
  ssl-certs:
    external: true
  certbot-web:
    driver: local
  nginx-logs:
    driver: local
  certbot-logs:
    driver: local


networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
