services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    ports:
      - "${SERVER_PORT:-8080}:8080"
    volumes:
      - h2-data:/app/data
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - JAVA_OPTS=${JAVA_OPTS:--Xmx192m -Xms96m -XX:+UseSerialGC -XX:MaxRAM=256m -Xss512k -XX:MaxMetaspaceSize=96m -XX:CompressedClassSpaceSize=32m -Xmn64m -XX:+UseG1GC -XX:+UseStringDeduplication}
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ssl-certs:/etc/letsencrypt:ro
      - certbot-web:/var/www/certbot
      - nginx-logs:/var/log/nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NGINX_HOST=${NGINX_HOST:-bina.fernandojunior.com.br}
      - ENVIRONMENT=${ENVIRONMENT:-prod}
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-fernando.medeiros@gmail.com}
    deploy:
      resources:
        limits:
          memory: 64m
        reservations:
          memory: 32m
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ssl-certs:/etc/letsencrypt
      - certbot-web:/var/www/certbot
      - certbot-logs:/var/log/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-fernando.medeiros@gmail.com}
      - DOMAIN=${NGINX_HOST:-bina.fernandojunior.com.br}
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem ]; then
          echo 'üîê Obtendo certificado inicial...' &&
          certbot certonly --webroot -w /var/www/certbot --quiet --non-interactive --agree-tos --email $${CERTBOT_EMAIL} -d $${DOMAIN}
        fi &&
        echo 'üîê Iniciando servi√ßo de renova√ß√£o autom√°tica de certificados...' &&
        trap 'echo \"üõë Parando servi√ßo de certificados...\"; exit 0' TERM INT &&
        while true; do
          echo '‚è∞ Aguardando 12 horas para pr√≥xima verifica√ß√£o...' &&
          sleep 12h &&
          echo 'üîÑ Verificando renova√ß√£o de certificados...' &&
          certbot renew --webroot -w /var/www/certbot --quiet --non-interactive &&
          if [ $$? -eq 0 ]; then
            echo '‚úÖ Certificados renovados com sucesso!' &&
            curl -s -X POST --unix-socket /var/run/docker.sock http://localhost/containers/nginx/kill?signal=SIGHUP || echo '‚ö†Ô∏è Falha ao recarregar Nginx'
          else
            echo '‚ùå Falha na renova√ß√£o dos certificados'
          fi
        done
      "
    depends_on:
      - nginx
    networks:
      - app-network
    restart: unless-stopped

  # Monitor de certificados (opcional)
  cert-monitor:
    image: alpine:latest
    volumes:
      - ssl-certs:/etc/letsencrypt:ro
      - cert-monitor-logs:/var/log
    environment:
      - DOMAIN=${NGINX_HOST:-bina.fernandojunior.com.br}
    command: >
      sh -c "
        apk add --no-cache openssl curl &&
        while true; do
          echo 'üîç Verificando validade dos certificados...' &&
          if [ -f /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem ]; then
            EXPIRY=$$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem | cut -d= -f2) &&
            echo \"üìÖ Certificado expira em: $$EXPIRY\" &&
            DAYS_LEFT=$$(($$(date -d \"$$EXPIRY\" +%s) - $$(date +%s))) &&
            DAYS_LEFT=$$(($$DAYS_LEFT / 86400)) &&
            echo \"‚è∞ Dias restantes: $$DAYS_LEFT\" &&
            if [ $$DAYS_LEFT -lt 7 ]; then
              echo '‚ö†Ô∏è ATEN√á√ÉO: Certificado expira em menos de 7 dias!' &&
              curl -X POST -H 'Content-Type: application/json' -d '{\"text\":\"‚ö†Ô∏è Certificado SSL expira em $$DAYS_LEFT dias!\"}' $${WEBHOOK_URL:-} 2>/dev/null || true
            fi
          else
            echo '‚ùå Certificado n√£o encontrado!'
          fi &&
          sleep 24h
        done
      "
    networks:
      - app-network
    restart: unless-stopped

volumes:
  h2-data:
    driver: local
  ssl-certs:
    driver: local
  certbot-web:
    driver: local
  nginx-logs:
    driver: local
  certbot-logs:
    driver: local
  cert-monitor-logs:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
